{"name":"http-request","tagline":"http-request is a nodeJS http client that simplifies HTTP request making.","body":"[![Build Status](https://secure.travis-ci.org/ranm8/http-request.png?branch=master)](http://travis-ci.org/ranm8/http-request)\r\n\r\n## Installation\r\n\r\n\tnpm install http_request  \r\n\r\n\r\n## How to use?\r\n\r\nhttp-request is extremely easy to use and always return a promise (using the great Q module)...\r\n\r\nSimply require the module and start requesting:\r\n\r\n``` javascript\r\nvar httpRequest = require('http_request'); \r\n```\r\nGET Request:\r\n\r\n``` javascript\r\nhttpRequest.get('http://example.com').then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\nPOST Request in JSON:\r\n\r\n``` javascript\r\nhttpRequest.post('http://example.com', {\r\n\t\tbody: {\r\n\t\t\thello: 'world'\r\n\t\t}\r\n\t})\r\n\t.then(function(response) {\r\n\t\t// Get the response body\r\n\t\tresponse.getBody();\r\n\t});\r\n```\r\n\r\n## API Reference\r\n\r\n### options\r\n\r\n#### `method {string}` \r\nHTTP method to use, can be any valid HTTP method (e.g. POST, GET, DELETE, HEAD, PUT, etc.).\r\n\r\n#### `body {object|string}`\r\nCan be either an object (key, val) or a string, will be formatted depending on the dataType property and served via response body.\r\n\r\n#### `headers {object}` \r\n(key, value) object of headers (some headers like content-length are set by default)\r\n\r\n#### `cookies {object}` \r\n(key, value) object of cookies to encode and serve via the request header.\r\n\r\n#### `auth {{ username: string, password: string }} `\r\nAdds Basic authintication header with given username and password\r\n\r\n#### `dataType {string}` \r\n\r\nDetermines the request data type (json|form-url-encoded), this option will encode the request body according to the given dataType and will add the appropriate header (defaults to json). \r\n\r\nIf null will be given, the body will be served as string.\r\n\r\n### httpRequest.request(url, options)\r\n\r\nExecutes a custom request according to options object\r\n\r\n``` javascript\r\nhttpRequest.request('https://example.com/api/foo', {\r\n\tmethod: 'POST',\r\n\tbody: {\r\n\t\tfoo: 'bar'\r\n\t\tbar: 'foo'\r\n\t},\r\n\theaders: {\r\n\t\t'X-Forwarded-By': 'me'\r\n\t},\r\n\tcookies: {\r\n\t\tmySession: 'some cookie value'\r\n\t},\r\n\tauth: {\r\n\t\tusername: 'foo',\r\n\t\tpassword: 'bar'\r\n\t},\r\n\tdataType: 'json'\t\t\r\n})\r\n.then(function(response) {\r\n\t// get the response body\r\n\tresponse.getBody();\r\n\r\n   \t// get the response headers\r\n \tresponse.getHeaders();\r\n\r\n \t// get specific response header\r\n \tresponse.getHeader('Accept');\r\n \r\n \t// get the code\r\n \tresponse.getCode();\r\n});\r\n```\r\n### httpRequest.get(url, options)\r\n\r\nExceutes a GET method request\r\n``` javascript\r\nhttpRequest.get('http://example.com').then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n### httpRequest.post(url, options)\r\n\r\nExceutes a POST method request\r\n``` javascript\r\nhttpRequest.post('http://example.com', {\r\n\tbody: {\r\n\t\thello: 'world'\r\n\t}\r\n})\r\n.then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\n### httpRequest.put(url, options)\r\n\r\nExceutes a PUT method request\r\n\r\n``` javascript\r\nhttpRequest.put('http://example.com', {\r\n\t\tbody: 'some file content',\r\n\t\tdataType: null\t\r\n\t})\r\n\t.then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\n### httpRequest.del(url, options)\r\n\r\nExceutes a DELETE method request\r\n\r\n``` javascript\r\nhttpRequest.del('http://example.com').then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\n### httpRequest.head(url, options)\r\n\r\nExceutes a HEAD method request\r\n\r\n``` javascript\r\nhttpRequest.head('http://example.com').then(function(response) {\r\n\t// Get the response code\r\n\tresponse.getCode();\r\n});\r\n```\r\n\r\n## Running Tests\r\n\r\nTo run the test suite first install the development dependencies:\r\n\r\n\t$ npm install\t\r\n\r\nThen run the tests:\r\n\r\n\t$ npm test\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Ran Mizrahi <<ranm@codeoasis.com>>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"UA-41822334-1","note":"Don't delete this file! It's used internally to help with page regeneration."}