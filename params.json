{"name":"Requestify","tagline":"Simplifies node HTTP request making.","body":"[![Build Status](https://secure.travis-ci.org/ranm8/requestify.png?branch=master)](http://travis-ci.org/ranm8/requestify)\r\n\r\n# Installation\r\n\r\n\tnpm install requestify  \r\n\r\n# How to use?\r\n\r\nRequestify is extremely easy to use and always return a promise (using the amazing Q module)...\r\n\r\nSimply require the module and start requesting:\r\n\r\n``` javascript\r\nvar requestify = require('requestify'); \r\n```\r\nGET Request:\r\n\r\n``` javascript\r\nrequestify.get('http://example.com').then(function(response) {\r\n\t// Get the response body (JSON parsed - JSON response or jQuery object in case of XML response)\r\n\tresponse.getBody();\r\n\r\n\t// Get the response raw body\r\n\tresponse.body;\r\n});\r\n```\r\n\r\nPOST Request in JSON:\r\n\r\n``` javascript\r\nrequestify.post('http://example.com', {\r\n\t\thello: 'world'\r\n\t})\r\n\t.then(function(response) {\r\n\t\t// Get the response body\r\n\t\tresponse.getBody();\r\n\t});\r\n```\r\n\r\n# API Reference\r\n\r\n## Configuration methods\r\n\r\n### requestify.setEncoding(encoding)\r\n\r\nSets Requestify's encoding. Requestify will use this encoding to decode the responses.\r\nDefaults to utf8.\r\n\r\n```javascript\r\nrequestify.setEncoding('utf8'); // utf8 is set by default anyway.\r\n```\r\n\r\n### requestify.cacheTransporter(cacheTransporter)\r\n\r\nSets the cache transporter for Requestify's use. Requestify will use this transporter for caching desired flagged HTTP responses.\r\nFor using one of Requestify's core transporter use the core transporters object (`coreCacheTransporters`).\r\n\r\nFor example:\r\n\r\n```javascript\r\nrequestify.cacheTransporter(coreCacheTransporters.redis(myRedisInstance)); // Set the core Redis cache transporter\r\n```\r\n\r\nYou can implement your own cache transporters (@see \"Custom Transporters\" below)\r\n\r\n### requestify.redis(redisInstance) - @depercated\r\n\r\nSets Redis client instance. Requestify will use that instance for caching responses.\r\nPlease note, Requestify will NOT cache anything by default and caching is allowed only for GET requests (see @cache options for further info).\r\n\r\n```javascript\r\nvar redis = require('redis');\r\n\r\nrequestify.redis(redis.createClient());\r\n```\r\n\r\n## options\r\n\r\n### `method {string}` \r\nHTTP method to use, can be any valid HTTP method (e.g. POST, GET, DELETE, HEAD, PUT, etc.).\r\n\r\n### `body {object|string}`\r\nCan be either an object (key, val) or a string, will be formatted depending on the dataType property and served via request body.\r\n\r\n### `headers {object}` \r\n(key, value) object of headers (some headers like content-length are set by default)\r\n\r\n### `cookies {object}` \r\n(key, value) object of cookies to encode and serve via the request header.\r\n\r\n### `auth {{ username: string, password: string }} `\r\nAdds Basic authentication header with given username and password\r\n\r\n### `dataType {string}` \r\nDetermines the request data type (json|form-url-encoded), this option will encode the request body according to the given dataType and will add the appropriate header (defaults to json). \r\n\r\nIf null will be given, the body will be served as string.\r\n\r\n### `timeout {number} `\r\nSet a timeout (in milliseconds) for the request.\r\n\r\n### `cache {{ cache: boolean, expires: number }}`\r\nRequistify has built-in Redis based caching mechanism. For using this feature, set the cache property to true using the following object:\r\n\r\n```javascript\r\n{\r\n\tcache: true, // Will set caching to true for this request.\r\n\texpires: 3600 // Time for cache to expire in seconds\r\n}\r\n```\r\n\r\nCaching will always be set to `false` by default.\r\n\r\n## requestify.request(url, options)\r\n\r\nExecutes a custom request according to options object\r\n\r\n``` javascript\r\nrequestify.request('https://example.com/api/foo', {\r\n\tmethod: 'POST',\r\n\tbody: {\r\n\t\tfoo: 'bar'\r\n\t\tbar: 'foo'\r\n\t},\r\n\theaders: {\r\n\t\t'X-Forwarded-By': 'me'\r\n\t},\r\n\tcookies: {\r\n\t\tmySession: 'some cookie value'\r\n\t},\r\n\tauth: {\r\n\t\tusername: 'foo',\r\n\t\tpassword: 'bar'\r\n\t},\r\n\tdataType: 'json'\t\t\r\n})\r\n.then(function(response) {\r\n\t// get the response body\r\n\tresponse.getBody();\r\n\r\n   \t// get the response headers\r\n \tresponse.getHeaders();\r\n\r\n \t// get specific response header\r\n \tresponse.getHeader('Accept');\r\n \r\n \t// get the code\r\n \tresponse.getCode();\r\n\r\n\t// Get the response raw body\r\n\tresponse.body;\r\n});\r\n```\r\n## requestify.get(url, options)\r\n\r\nExecutes a GET method request\r\n``` javascript\r\nrequestify.get('http://example.com').then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n\r\n\t// Get the response raw body\r\n\tresponse.body;\r\n});\r\n```\r\n## requestify.post(url, data, options)\r\n\r\nExecutes a POST method request\r\n``` javascript\r\nrequestify.post('http://example.com', {\r\n\thello: 'world'\r\n})\r\n.then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\n## requestify.put(url, data, options)\r\n\r\nExecutes a PUT method request\r\n\r\n``` javascript\r\nrequestify.put('http://example.com', 'some-file-content').then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\n## requestify.delete(url, options)\r\n\r\nExecutes a DELETE method request\r\n\r\n``` javascript\r\nrequestify.delete('http://example.com').then(function(response) {\r\n\t// Get the response body\r\n\tresponse.getBody();\r\n});\r\n```\r\n\r\n## requestify.head(url, options)\r\n\r\nExecutes a HEAD method request\r\n\r\n``` javascript\r\nrequestify.head('http://example.com').then(function(response) {\r\n\t// Get the response code\r\n\tresponse.getCode();\r\n});\r\n```\r\n\r\n# Custom Cache Transporters\r\n\r\nUsing Requestify, you can implement your own cache transporters for using currently unsupported stores.\r\nTo implement your own store, all you have to do is implement Requestify's cache transporter interface. For example, you can see the core Redis transporter (./cache-transporters).\r\nBelow is the interface specs to implement:\r\n\r\n## get(url: string, callback: function)\r\n\r\nReturns the response according to the given URL from your cache store and call the given callback with the data.\r\n\r\n## set(url: string, response: {{ code: number, headers: object, body: string, created: timestamp }}, callback: function)\r\n\r\nStore the given response by the given URL (key), please make sure to store the response object exactly in the same way you've got it.\r\n\r\n## purge(url: string, callback: function)\r\n\r\nPurge the response according to the given URL (key) from your cache store.\r\n\r\n# Running Tests\r\n\r\nTo run the test suite first install the development dependencies:\r\n\r\n\t$ npm install\t\r\n\r\nThen run the tests:\r\n\r\n\t$ npm test\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Ran Mizrahi <<ranm@codeoasis.com>>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"UA-41822334-1","note":"Don't delete this file! It's used internally to help with page regeneration."}